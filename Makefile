FACTIONS = Battle_Brothers Tao Robot_Legions High_Elf_Fleets

TEX := $(foreach d,$(FACTIONS),$(d)/$(d).tex)
TEMPLATE := $(wildcard Template/*.sty)
PDF := $(TEX:.tex=.pdf)
OUT_PDF := $(addprefix out/,$(notdir $(PDF)))
PYTHONS := $(wildcard *.py)
COMMON := $(wildcard Common/*.yml)

CLEAN := $(foreach d,$(FACTIONS),$(wildcard $(d)/unit*.tex) $(wildcard $(d)/upgrades*.tex) $(wildcard $(d)/*.pdf)) $(wildcard out/tmp/*) $(wildcard out/txt/*) $(wildcard out/*)

# don't use built-in rules
.SUFFIXES:

# $(1) is Faction, $(2) is Faction/*.yml
# so out/Faction.pdf will depend on Faction/Faction.tex Faction/*.yml *.py Common/*.yml template/*.sty
# and Faction will depend on out/Faction.pdf
define build_pdf =
out/$(1).pdf: $(1)/$(1).tex $(2) $(PYTHONS) $(COMMON) $(TEMPLATE) | out out/tmp out/txt
	@rm -f $(1)/unit*.tex $(1)/upgrades*.tex
	@python3 onepagebatch.py --txt-dir out/txt $(1)
	@echo Generating $$@
	@cd $(1) && xelatex -interaction=batchmode -halt-on-error -output-directory=../out $(1).tex 2>&1 > /dev/null
# move temp files generated by xelatex to out/tmp/
	@mv out/$(1).out out/$(1).log out/$(1).aux out/tmp/

# Handy alias to build a faction, "make Tao" will do "make out/Tao.pdf"
.PHONY : $(1)
$(1): out/$(1).pdf
endef

all: $(OUT_PDF)

.PHONY: clean
clean:
	@echo Removing $(CLEAN)
	@rm -fd $(CLEAN)

.PHONY: indent
indent:
	@python3 indentyaml.py $(FACTIONS) Common

out:
	@mkdir $@

out/tmp:
	@mkdir $@

out/txt:
	@mkdir $@

# rules to build a pdf for each faction
$(foreach d,$(FACTIONS),$(eval $(call build_pdf,$(d),$(wildcard $(d)/*.yml))))
